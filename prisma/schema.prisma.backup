generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String   @id
  email                 String   @unique
  displayName           String?
  denPasswordHash       String?
  denEncryptionEnabled  Boolean  @default(false)
  denSyncEnabled        Boolean  @default(true)
  serverSync            Boolean  @default(true) // Local-only mode when false
  extensionToken        String?  @unique
  extensionTokenCreatedAt DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  cards       Card[]
  collections Collection[]
  viewSettings UserViewSettings[]
  settings    UserSettings?
}

model Card {
  id              String    @id @default(cuid())
  type            String    @default("url")
  url             String
  title           String?
  notes           String?
  content         String?
  status          String    @default("PENDING")
  tags            String?
  collections     String?
  domain          String?
  image           String?
  description     String?
  metadata        String?
  articleContent  String?
  pinned          Boolean   @default(false)
  deleted         Boolean   @default(false)
  deletedAt       DateTime?
  inDen           Boolean   @default(false)
  encryptedContent String?
  scheduledDate   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, deleted])
  @@index([userId, inDen])
  @@index([userId, scheduledDate])
  // Note: Unique constraint on (userId, url) is applied via custom migration
  // with WHERE type = 'url' to exclude notes from the constraint
}

model Collection {
  id                   String    @id @default(cuid())
  name                 String
  slug                 String    @unique
  parentId             String?
  coverImage           String?
  coverImagePosition   Int?      // Vertical position percentage (0-100)
  hidePreview          Boolean   @default(false) // Hide card preview tiles on pawkit card
  useCoverAsBackground Boolean   @default(false) // Use cover image as pawkit card background
  pinned               Boolean   @default(false)
  deleted              Boolean   @default(false)
  deletedAt            DateTime?
  inDen                Boolean   @default(false) // DEPRECATED: kept for migration, use isPrivate instead
  isPrivate            Boolean   @default(false) // Private pawkits isolate cards from Library/Timeline/Search
  passwordHash         String?   // Optional per-pawkit password protection
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  userId               String
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, deleted])
  @@index([userId, inDen])
  @@index([userId, isPrivate])
}

model UserViewSettings {
  id        String   @id @default(cuid())
  userId    String
  view      String   // "library", "notes", "den", "timeline", "pawkits", etc.

  // Layout settings
  layout    String   @default("grid") // grid, masonry, list, compact
  cardSize  Int      @default(3)      // 1-5 scale

  // Display settings
  showTitles    Boolean @default(true)
  showUrls      Boolean @default(true)
  showTags      Boolean @default(true)
  cardPadding   Int     @default(2)    // 0-4 scale

  // Sorting settings
  sortBy        String  @default("createdAt") // createdAt, title, url, updatedAt, pawkit
  sortOrder     String  @default("desc")       // asc, desc

  // View-specific settings (JSON for flexibility)
  viewSpecific  String? // JSON string for view-specific options

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, view])
  @@index([userId])
}

model UserSettings {
  id        String   @id @default(cuid())
  userId    String   @unique

  // General app settings
  autoFetchMetadata   Boolean @default(true)
  showThumbnails      Boolean @default(true)
  previewServiceUrl   String  @default("http://localhost:8787/preview?url={{url}}")
  theme               String  @default("dark")      // dark, light, auto
  accentColor         String  @default("purple")    // purple, blue, green, red, orange
  notifications       Boolean @default(true)
  autoSave            Boolean @default(true)
  compactMode         Boolean @default(false)
  showPreviews        Boolean @default(true)
  autoSyncOnReconnect Boolean @default(true)
  cardSize            Int     @default(3)           // 1-5 scale

  // JSON fields for complex data structures
  displaySettings     String  @default("{}") // JSON: Record<Area, DisplaySettings>
  pinnedNoteIds       String  @default("[]") // JSON: string[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

